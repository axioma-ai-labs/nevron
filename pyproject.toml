[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nevron"
version = "0.1.0"
authors = []
description = "Nevron AI Agent"
readme = "README.md"
keywords = ["agent", "ai"]
requires-python = ">=3.8"
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: GNU General Public License v3.0",
  "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/axioma-ai-labs/nevron"
Documentation = "https://nevron.ai"

[tool.poetry]
name = "nevron"
version = "0.2.0"
description = "Python framework for building autonomous AI agents"
authors = ["Dzmitry Hramyka <grom.dima.grom@gmail.com>"]
package-mode = false 

[tool.poetry.dependencies]
python = "^3.13"
pydantic = "^2.10.5"
pydantic-settings = "^2.7.1"
loguru = "^0.7.3"
setuptools = "^75.8.0"
numpy = "^2.2.2"
openai = "^1.60.1"
pyyaml = "^6.0.2"
rapidfuzz = "^3.11.0"
python-telegram-bot = "^21.10"
tweepy = "^4.15.0"
discord = "^2.3.2"
slack-sdk = "^3.34.0"
lenspy = "^1.1.0"
gql = "^3.5.0"
pygithub = "^2.6.1"
gitpython = "^3.1.44"
whatsapp-api-client-python = "^0.0.48"
shopifyapi = "^12.7.0"
tavily-python = "^0.5.0"
aiohttp = "^3.11.11"
pillow = "^11.1.0"
lxml-html-clean = "^0.4.1"
requests-html = "^0.10.0"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.50"
mkdocs-macros-plugin = "^1.3.7"
mkdocs-awesome-pages-plugin = "^2.10.1"
anthropic = "^0.45.0"
chromadb = "^0.6.3"
google-auth = "^2.38.0"
google-auth-oauthlib = "^1.2.1"
google-api-python-client = "^2.161.0"
qdrant-client = "^1.13.2"
discord-py = {extras = ["voice"], version = "^2.4.0"}
audioop-lts = { version = "^0.2.1", python = ">=3.13" }
requests-toolbelt = "^1.0.0"

[tool.poetry.group.dev.dependencies]
isort = "^5.13.2"
ruff = "^0.9.6"
mypy = "^1.14.1"
pytest = "^8.3.4"
pytest-asyncio = "^0.25.2"
pytest-cov = "^6.0.0"
types-requests = "^2.32.0.20241016"
freezegun = "^1.5.1"
llama-cpp-python = "^0.3.7"

[[tool.poetry.source]]
name = "llama-cpp-python-cpu"
url = "https://abetlen.github.io/llama-cpp-python/whl/cpu/"
priority = "supplemental"

[tool.mypy]
python_version = "3.13"
plugins = ["pydantic.mypy"]
# Paths to search for import modules, including stubs.
mypy_path = ["stubs"]
# Treats missing imports as errors.
ignore_missing_imports = true
# Runs type checking on all files, even those without type hints.
check_untyped_defs = true
follow_imports = "silent"
warn_redundant_casts = true
no_implicit_reexport = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true


[tool.pytest.ini_options]
env = [
    "ENVIRONMENT=ci",
]
filterwarnings = [
    "ignore::DeprecationWarning"
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]


[tool.ruff]
exclude = ["tests"]
target-version = "py313"
# Formatter
line-length = 100

[tool.ruff.lint.isort]
lines-after-imports = 2
combine-as-imports = true


[tool.isort]
py_version = 312
profile = "black"
overwrite_in_place = "true"
combine_as_imports = true
lines_after_imports = 2